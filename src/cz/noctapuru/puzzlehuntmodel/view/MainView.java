/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainPanel.java
 *
 * Created on Mar 14, 2011, 2:47:40 PM
 */

package cz.noctapuru.puzzlehuntmodel.view;

import cz.noctapuru.puzzlehuntmodel.controller.MainViewController;
import cz.noctapuru.puzzlehuntmodel.math.MonteCarloResult;
import cz.noctapuru.puzzlehuntmodel.model.CheckpointResult;
import java.awt.Color;
import java.awt.Paint;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.SpinnerDateModel;
import javax.swing.table.AbstractTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;

import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.data.Range;
import org.jfree.data.statistics.BoxAndWhiskerCategoryDataset;

/**
 *
 * @author viktor
 */
public class MainView extends View {

    // most of these are just names, the view isn't a JavaBean
    public static final String PROP_SIMULATIONS = "simulations";
    public static final String PROP_TEAMS = "teams";

    public static final String PROP_START_DATE = "startDate";
    public static final String PROP_END_DATE = "endDate";
    public static final String PROP_CURRENT_DATE = "currentDate";

    private MainViewController controller;
    private ResultsTableModel resultsTableModel;
    private JFreeChart teamsChart;
    
    private boolean currentTimeSliderBeingDragged = false;


    /** Creates new form MainPanel */
    public MainView(MainViewController controller) {
        this.controller = controller;
        this.resultsTableModel = new ResultsTableModel();

        this.teamsChart = ChartFactory.createBoxAndWhiskerChart("Teams at checkpoints", "checkpoint", "teams",
                                                                (BoxAndWhiskerCategoryDataset) null, false);
        CategoryPlot plot = this.teamsChart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.DARK_GRAY);
        plot.setBackgroundPaint(Color.WHITE);
        plot.getRangeAxis().setAutoRange(false);

        BoxAndWhiskerRenderer renderer = (BoxAndWhiskerRenderer) this.teamsChart.getCategoryPlot().getRenderer();
        renderer.setMeanVisible(false);

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        runButton = new javax.swing.JButton();
        simulationsSpinner = new javax.swing.JSpinner();
        teamsSpinner = new javax.swing.JSpinner();
        gameStartSpinner = new javax.swing.JSpinner();
        gameEndSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        checkpointsButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        statusProgressBar = new javax.swing.JProgressBar();
        currentTimeSpinner = new javax.swing.JSpinner();
        currentTimeSlider = new javax.swing.JSlider();
        jPanel4 = new ChartPanel(this.teamsChart);

        setMinimumSize(new java.awt.Dimension(562, 404));

        jSplitPane1.setDividerLocation(450);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(513, 404));

        jPanel1.setBounds(new java.awt.Rectangle(0, 0, 100, 100));
        jPanel1.setMinimumSize(new java.awt.Dimension(300, 400));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 591));

        runButton.setText("Run simulation");
        runButton.setFocusable(false);
        runButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        simulationsSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                simulationsSpinnerStateChanged(evt);
            }
        });

        teamsSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                teamsSpinnerStateChanged(evt);
            }
        });

        gameStartSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR));
        gameStartSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gameStartSpinnerStateChanged(evt);
            }
        });

        gameEndSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR));
        gameEndSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gameEndSpinnerStateChanged(evt);
            }
        });

        jLabel1.setText("Simulations");

        jLabel2.setText("Teams in the game");

        jLabel3.setText("Game starts");

        jLabel4.setText("Game ends");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(gameEndSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .add(teamsSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .add(gameStartSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .add(simulationsSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(289, Short.MAX_VALUE)
                .add(runButton))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(simulationsSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(teamsSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(gameStartSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(gameEndSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(runButton)
                .addContainerGap())
        );

        resultsTable.setModel(this.resultsTableModel);
        jScrollPane1.setViewportView(resultsTable);

        checkpointsButton.setText("Checkpoints");
        checkpointsButton.setToolTipText("Edit Checkpoints");
        checkpointsButton.setFocusable(false);
        checkpointsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        checkpointsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        checkpointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkpointsButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, checkpointsButton)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkpointsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setMinimumSize(new java.awt.Dimension(0, 0));

        statusProgressBar.setBorderPainted(false);

        currentTimeSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MINUTE));
        currentTimeSpinner.setEnabled(false);
        currentTimeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                currentTimeSpinnerStateChanged(evt);
            }
        });

        currentTimeSlider.setMaximum(1000);
        currentTimeSlider.setValue(0);
        currentTimeSlider.setEnabled(false);
        currentTimeSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                currentTimeSliderMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                currentTimeSliderMouseReleased(evt);
            }
        });
        currentTimeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                currentTimeSliderStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 609, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 487, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(statusProgressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(currentTimeSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(currentTimeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(currentTimeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(currentTimeSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel2);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1090, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        controller.runButtonClicked();
    }//GEN-LAST:event_runButtonActionPerformed

    private void checkpointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkpointsButtonActionPerformed
        controller.checkpointsButtonClicked();
    }//GEN-LAST:event_checkpointsButtonActionPerformed

    private void simulationsSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_simulationsSpinnerStateChanged
        javax.swing.SpinnerModel spinnerModel = this.simulationsSpinner.getModel();
        this.propertySupport.firePropertyChange(PROP_SIMULATIONS, null, spinnerModel.getValue());
    }//GEN-LAST:event_simulationsSpinnerStateChanged

    private void teamsSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_teamsSpinnerStateChanged
        javax.swing.SpinnerModel spinnerModel = this.teamsSpinner.getModel();
        this.propertySupport.firePropertyChange(PROP_TEAMS, null, spinnerModel.getValue());
    }//GEN-LAST:event_teamsSpinnerStateChanged

    private void gameStartSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gameStartSpinnerStateChanged
        Date startDate = ((SpinnerDateModel) this.gameStartSpinner.getModel()).getDate();
        this.resultsTableModel.fireTableDataChanged();

        this.propertySupport.firePropertyChange(PROP_START_DATE, null, startDate);
    }//GEN-LAST:event_gameStartSpinnerStateChanged

    private void gameEndSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gameEndSpinnerStateChanged
        Date endDate = ((SpinnerDateModel) this.gameEndSpinner.getModel()).getDate();
        this.propertySupport.firePropertyChange(PROP_END_DATE, null, endDate);

        this.updateCurrentTimeSlider();
    }//GEN-LAST:event_gameEndSpinnerStateChanged

    private void currentTimeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_currentTimeSpinnerStateChanged
        Date currentDate = ((SpinnerDateModel) this.currentTimeSpinner.getModel()).getDate();
        
        if(this.currentTimeSliderBeingDragged)
            return;

        this.propertySupport.firePropertyChange(PROP_CURRENT_DATE, null, currentDate);
        this.updateCurrentTimeSlider();
    }//GEN-LAST:event_currentTimeSpinnerStateChanged

    private void currentTimeSliderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentTimeSliderMousePressed
        this.currentTimeSliderBeingDragged = true;
    }//GEN-LAST:event_currentTimeSliderMousePressed

    private void currentTimeSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentTimeSliderMouseReleased
        this.currentTimeSliderBeingDragged = false;
        this.propertySupport.firePropertyChange(PROP_CURRENT_DATE, null, this.getCurrentDate());
    }//GEN-LAST:event_currentTimeSliderMouseReleased

    private void currentTimeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_currentTimeSliderStateChanged
        if(this.currentTimeSliderBeingDragged)
            this.setCurrentDateFromSlider(this.currentTimeSlider.getValue());
    }//GEN-LAST:event_currentTimeSliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkpointsButton;
    private javax.swing.JSlider currentTimeSlider;
    private javax.swing.JSpinner currentTimeSpinner;
    private javax.swing.JSpinner gameEndSpinner;
    private javax.swing.JSpinner gameStartSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable resultsTable;
    private javax.swing.JButton runButton;
    private javax.swing.JSpinner simulationsSpinner;
    private javax.swing.JProgressBar statusProgressBar;
    private javax.swing.JSpinner teamsSpinner;
    // End of variables declaration//GEN-END:variables

    public void setProgress(double progress) {
        this.statusProgressBar.setValue((int) (100 * progress));
    }

    public void setResults(List<CheckpointResult> results) {
        this.resultsTableModel.setResults(results);

        this.resultsTable.setEnabled(true);
        this.currentTimeSlider.setEnabled(true);
        this.currentTimeSpinner.setEnabled(true);
    }

    public void setTeams(Integer teams) {
        this.teamsSpinner.getModel().setValue(teams);
        this.teamsChart.getCategoryPlot().getRangeAxis().setRange(0, teams);
    }

    public void setSimulations(Integer simulations) {
        this.simulationsSpinner.getModel().setValue(simulations);
    }

    public Date getStartDate() {
        return ((SpinnerDateModel) this.gameStartSpinner.getModel()).getDate();
    }

    public void setStartDate(Date startDate) {
        if(!getStartDate().equals(startDate))
            this.gameStartSpinner.setValue(startDate);
    }

    public Date getEndDate() {
        return ((SpinnerDateModel) this.gameEndSpinner.getModel()).getDate();
    }

    public void setEndDate(Date endDate) {
        if(getEndDate().equals(endDate))
            return;

        this.gameEndSpinner.setValue(endDate);
        this.updateCurrentTimeSlider();
    }

    public Date getCurrentDate() {
        return ((SpinnerDateModel) this.currentTimeSpinner.getModel()).getDate();
    }

    public void setCurrentDate(Date currentDate) {
        if(getCurrentDate().equals(currentDate))
            return;

        this.currentTimeSpinner.setValue(currentDate);
        this.updateCurrentTimeSlider();
    }

    public void setCureentTimeUIEnabled(boolean enabled) {
        this.currentTimeSpinner.setEnabled(enabled);
        this.currentTimeSlider.setEnabled(enabled);
    }

    public void setTeamsChartData(BoxAndWhiskerCategoryDataset data) {
        this.teamsChart.getCategoryPlot().setDataset(data);
    }

    private void updateCurrentTimeSlider() {
        double startTime = this.getStartDate().getTime();
        double endTime = this.getEndDate().getTime();
        double currentTime = this.getCurrentDate().getTime();
        
        double sliderValue = (currentTime - startTime) / (endTime - startTime);
        
        double sliderMin = this.currentTimeSlider.getMinimum();
        double sliderMax = this.currentTimeSlider.getMaximum();

        this.currentTimeSlider.setValue((int) (sliderMin + sliderValue * (sliderMax - sliderMin)));
    }

    private void setCurrentDateFromSlider(double sliderVal) {
        double sliderMin = this.currentTimeSlider.getMinimum();
        double sliderMax = this.currentTimeSlider.getMaximum();
        sliderVal = sliderVal / (sliderMax - sliderMin); // normalize

        double startTime = this.getStartDate().getTime();
        double endTime = this.getEndDate().getTime();
        long newCurrentTime = (long) (startTime + sliderVal * (endTime - startTime));

        Date newCurrentDate = new Date(newCurrentTime);
        this.currentTimeSpinner.setValue(newCurrentDate);
    }

    private class ResultsTableModel extends AbstractTableModel  {
        
        private List<CheckpointResult> results;
        private java.text.SimpleDateFormat dateFormat;
        private java.text.DecimalFormat decimalFormat;

        public ResultsTableModel() {
            this.results = new ArrayList<CheckpointResult>();
            this.dateFormat = new java.text.SimpleDateFormat("HH:mm");
            this.decimalFormat = new java.text.DecimalFormat("####.##");
        }

        public void setResults(List<CheckpointResult> results) {
            this.results = results;
            this.fireTableDataChanged();
        }

        public int getRowCount() {
            return this.results.size();
        }

        public int getColumnCount() {
            return 4;
        }

        @Override
        public Class<?> getColumnClass(int i) {
            return String.class;
        }

        @Override
        public String getColumnName(int i) {
            switch(i) {
                case 0:
                    return "Checkpoint";
                case 1:
                    return "Opened";
                case 2:
                    return "Closed";
                case 3:
                    return "Reached by";
            }

            return "";
        }

        public Object getValueAt(int i, int i1) {
            MonteCarloResult time;

            switch(i1) {
                case 0:
                    return (i == this.results.size() - 1 ? "finish" : i);
                case 1:
                    return formattedResultTime(this.results.get(i).getOpeningTime());
                case 2:
                    if(i == this.results.size() - 1)
                        return "never";
                    
                    return formattedResultTime(this.results.get(i).getClosingTime());
                case 3:
                    return this.results.get(i).getReachedByTeams().toString();

            }

            return "";
        }

        private String formattedResultTime(MonteCarloResult result) {
            long time = Math.round(result.getMean() * 60000);
            Date resultDate = new Date(getStartDate().getTime() + time);

            if(resultDate.after(getEndDate()))
                return "never";

            return this.dateFormat.format(resultDate) + " ± " + this.decimalFormat.format(result.getError());
        }
    }
}
